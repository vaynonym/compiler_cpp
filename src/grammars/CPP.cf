PDefs . Program ::= [Def];

-- To execute the literal-* tests, use these two lines
-- and comment out the first line instead.
--PDefs . Program ::= [Exp] ;
--separator Exp "" ;

-- Remove this and insert defintion productions here.
DExample . Def ::= "exampledef" ;

-- Statements
SExp     . Stm ::= Exp ";" ;
SReturn  . Stm ::= "return" Exp ";" ;
-- TODO: Variable declarations require types and identifiers
-- SVarDecl . Stm ::= 
SWhile   . Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile . Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
-- TODO: for requires a variable declaration
-- SFor     . Stm ::= 
SIf      . Stm ::= "if" "(" Exp ")" Stm ;
SIfElse  . Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SBlock   . Stm ::= "{" [Stm] "}" ;
-- TODO: typedef requires types and identifiers
-- STypeDef . Stm ::= 

-- Remove this and insert expression productions here.
EExamle . Exp ::= "exampleexp" ;


-- Literals
-- TODO: Still need to handle precedence here once the other
--       expressions are done.
LInt    . Exp ::= Integer ;
LFloat  . Exp ::= Double ;
LChar   . Exp ::= Char ;
LString . Exp ::= String ;
LTrue   . Exp ::= "true" ;
LFalse  . Exp ::= "false" ;

-- Separators and terminators here
terminator Def "";
separator Stm "";

-- comments
comment "//";
comment "/*" "*/";
comment "#";