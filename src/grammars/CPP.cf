PDefs . Program ::= [Def];

-- To execute the literal-* tests, use these two lines
-- and comment out the first line instead.
--PDefs . Program ::= [Exp] ;
--separator Exp "" ;

-- Definitions
-- TODO: function definition needs types, identifiers, argument lists and function bodies
DFun . Def ::= Fun;
DTLS . Def ::= TLStm;

-- Functions
FDec . Fun ::= Prefix Type Id "(" [Arg] ")" ";";
FDef . Fun ::= Prefix Type Id "(" [Arg] ")" "{" [Stm] "}";
PInl . Prefix ::= "inline";
PEmp . Prefix ::= ;
FArg . Arg ::= PrefixedType Id Argdef;
FArgdef . Argdef ::= "=" Exp;
FArgEmp . Argdef ::= ;


-- TODO: definition for using qualified constants needs qualified constants
-- DUsing . Def ::= "using" QConstant;

-- Remove this and insert defintion productions here.
DExample . Def ::= "exampledef" ;

-- Statements
STopLevel  . Stm ::= TLStm ;
SEmpty     . Stm ::= ";" ;
SExp       . Stm ::= Exp ";" ;
SReturn    . Stm ::= "return" Exp ";" ;
SWhile     . Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile   . Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor       . Stm ::= "for" "(" SVarDecl Exp ";" Exp ")" Stm ;
SIf        . Stm ::= "if" "(" Exp ")" Stm ;
SIfElse    . Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SBlock     . Stm ::= "{" [Stm] "}" ;

SVarDeclTL . TLStm ::= VarDecl ;
STypeDef   . TLStm ::= "typedef" Type Id ";" ;
SStruct    . TLStm ::= "struct" Id "{" [VarDecl] "}" ";" ;

SVarDecl         . VarDecl ::= VDPrefConstInit PrefixedType [VDVar] ";" ;
VDPrefConstInitE . VDPrefConstInit ::= ;
VDPrefConstInit  . VDPrefConstInit ::= "constinit" ;
VDVar            . VDVar ::= Id ;
VDVar            . VDVar ::= Id "=" Exp ;

-- Expressions
-- atomic expression
EInt      . Exp15 ::= Integer ;
EDouble   . Exp15 ::= Double ;
EString   . Exp15 ::= String ;
ETrue     .	Exp15 ::= "true" ;
EFalse    . Exp15 ::= "false" ;
-- qualified constants 
EQuaConst . Exp14 ::= QConstant ;
-- indexing 
EIndex    . Exp14 ::= Exp15 "[" Integer "]" ;
-- function call
ECall     . Exp14 ::= Exp14 "(" [Exp] ")" ;
-- structure projection
EPoint    . Exp14 ::= Exp13 "." Exp14 ;
EArrow    . Exp14 ::= Exp13 "->" Exp14 ;
-- in/decrement
EPostIncr . Exp14 ::= Exp15 "++" ;
EPostDecr . Exp14 ::= Exp15 "--" ;
-- in/decrement, dereference, negation
EPreIncr  . Exp13 ::= "++" Exp14 ;
EPreDecr  . Exp13 ::= "--" Exp14 ;
EDeref 	  . Exp13 ::= "*"  Exp14 ;
ENeg	  . Exp13 ::= "!"  Exp14 ;
-- Multiplication, Division,Remainder 
EMul      . Exp12 ::= Exp12 "*"  Exp13 ;
EDiv      . Exp12 ::= Exp12 "/"  Exp13 ;
EMod	  . Exp12 ::= Exp12 "%"  Exp13 ; 
-- Addition, Subtraction 
EAdd      . Exp11 ::= Exp11 "+"  Exp12 ;
ESub      . Exp11 ::= Exp11 "-"  Exp12 ;
-- left and right shift
ERShift   . Exp10 ::= Exp9 ">>"  Exp10 ;
ELShift   . Exp10 ::= Exp9 "<<"  Exp10 ;
-- Comparison
ELt       . Exp9  ::= Exp9  "<"  Exp10 ;
EGt       . Exp9  ::= Exp9  ">"  Exp10 ;
ELtEq     . Exp9  ::= Exp9  "<=" Exp10 ;
EGtEq     . Exp9  ::= Exp9  ">=" Exp10 ;
-- (in)equality 
EEq       . Exp8  ::= Exp8  "==" Exp9 ;
ENEq      . Exp8  ::= Exp8  "!=" Exp9 ;
-- Conjunction
EAnd      . Exp4  ::= Exp4  "&&" Exp5 ;
-- Disjunction 
EOr       . Exp3  ::= Exp3  "||" Exp4 ;
-- Assignment 
EAssign   . Exp2  ::= Exp3 "="   Exp2 ;
EAddAss   . Exp2  ::= Exp3 "+="  Exp2 ;
ESubAss   . Exp2  ::= Exp3 "-="  Exp2 ;
-- Conditional 
ECond	  . Exp2  ::= Exp3 "?" Exp2 ":" Exp2 ;
--Exception 
EExcep	  . Exp1  ::= "throw" Expr2 ;

-- Types
TPre       .  PrefixedType ::= "const" Type ;
TNoPre     .  PrefixedType ::= Type ;
TAddr      .  Type         ::= Type "&" ;
TQCon      .  Type         ::= QConstant ;
TInt       .  Type         ::= "int" ;
TBool      .  Type         ::= "bool" ;
TChar      .  Type         ::= "char" ;
TDouble    .  Type         ::= "double";
TVoid      .  Type         ::= "void";


-- Literals
-- TODO: Still need to handle precedence here once the other
--       expressions are done.
LInt    . Exp ::= Integer ;
LFloat  . Exp ::= Double ;
LChar   . Exp ::= Char ;
LString . Exp ::= String ;
LTrue   . Exp ::= "true" ;
LFalse  . Exp ::= "false" ;

-- Separators and terminators here
terminator Def "";
separator Stm "";
separator Arg ",";
separator nonempty VDVar ",";
separator VarDecl "";

--identifiers
token Id (letter (letter|digit|'_')*) ;
-- comments
comment "//";
comment "/*" "*/";
comment "#";
