PDefs . Program ::= [Def];

-- Definitions
DFun   . Def ::= Fun;
DTLS   . Def ::= TLStm;
DUsing . Def ::= "using" QConstant;

-- Functions
FSign       . Fun       ::= Type Id "(" [Arg] ")" FRest ;
FSignPrefix . Fun       ::= "inline" Type Id "(" [Arg] ")" FRest ;
FDef        . FRest     ::=  "{" [Stm] "}";
FDecl       . FRest     ::= ";" ;
FArg        . Arg       ::= PrefixedType Id Argdef ;
FArgdef     . Argdef    ::= "=" Exp ;
FArgEmp     . Argdef    ::= ;

-- Qualified Constants and templates
QCDef . QConstant ::= Id "::" QConstant;
QCId  . QConstant ::= Id;
QCTem . QCOnstant ::= Id "<" [Type] ">";

-- Statements
STopLevel  . Stm ::= TLStm ;
SEmpty     . Stm ::= ";" ;
SExp       . Stm ::= Exp ";" ;
SReturn    . Stm ::= "return" Exp ";" ;
SWhile     . Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile   . Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor       . Stm ::= "for" "(" VarDecl Exp ";" Exp ")" Stm ;
SIf        . Stm ::= "if" "(" Exp ")" Stm ;
SIfElse    . Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SBlock     . Stm ::= "{" [Stm] "}" ;

SVarDeclTL . TLStm ::= VarDecl ;
STypeDef   . TLStm ::= "typedef" Type Id ";" ;
SStruct    . TLStm ::= "struct" Id "{" [VarDecl] "}" ";" ;

SVarDecl         . VarDecl         ::= VDPrefConstInit PrefixedType [VDVar] ";" ;
VDPrefConstInitE . VDPrefConstInit ::= ;
VDPrefConstInit  . VDPrefConstInit ::= "constinit" ;
VDVar            . VDVar           ::= Id ;
VDVarValue       . VDVar           ::= Id "=" Exp ;

-- Expressions
-- qualified constants 
EQuaConst . Exp14 ::= QConstant ;
-- indexing 
EIndex    . Exp14 ::= Exp15 "[" Integer "]" ;
-- function call
ECall     . Exp14 ::= Exp14 "(" [Exp] ")" ;
-- structure projection
EPoint    . Exp14 ::= Exp13 "." Exp14 ;
EArrow    . Exp14 ::= Exp13 "->" Exp14 ;
-- in/decrement
EPostIncr . Exp14 ::= Exp15 "++" ;
EPostDecr . Exp14 ::= Exp15 "--" ;
-- in/decrement, dereference, negation
EPreIncr  . Exp13 ::= "++" Exp14 ;
EPreDecr  . Exp13 ::= "--" Exp14 ;
EDeref    . Exp13 ::= "*"  Exp14 ;
ENeg      . Exp13 ::= "!"  Exp14 ;
-- Multiplication, Division,Remainder 
EMul      . Exp12 ::= Exp12 "*"  Exp13 ;
EDiv      . Exp12 ::= Exp12 "/"  Exp13 ;
EMod      . Exp12 ::= Exp12 "%"  Exp13 ; 
-- Addition, Subtraction 
EAdd      . Exp11 ::= Exp11 "+"  Exp12 ;
ESub      . Exp11 ::= Exp11 "-"  Exp12 ;
-- left and right shift
ERShift   . Exp10 ::= Exp9 ">>"  Exp10 ;
ELShift   . Exp10 ::= Exp9 "<<"  Exp10 ;
-- Comparison
ELt       . Exp9  ::= Exp9  "<"  Exp10 ;
EGt       . Exp9  ::= Exp9  ">"  Exp10 ;
ELtEq     . Exp9  ::= Exp9  "<=" Exp10 ;
EGtEq     . Exp9  ::= Exp9  ">=" Exp10 ;
-- (in)equality 
EEq       . Exp8  ::= Exp8  "==" Exp9 ;
ENEq      . Exp8  ::= Exp8  "!=" Exp9 ;
-- Conjunction
EAnd      . Exp4  ::= Exp4  "&&" Exp5 ;
-- Disjunction 
EOr       . Exp3  ::= Exp3  "||" Exp4 ;
-- Assignment 
EAssign   . Exp2  ::= Exp3 "="   Exp2 ;
EAddAss   . Exp2  ::= Exp3 "+="  Exp2 ;
ESubAss   . Exp2  ::= Exp3 "-="  Exp2 ;
-- Conditional 
ECond     . Exp2  ::= Exp3 "?" Exp2 ":" Exp2 ;
--Exception 
EExcep    . Exp1  ::= "throw" Exp2 ;
coercions Exp 15 ;

-- Types
TPre       . PrefixedType ::= "const" Type ;
TNoPre     . PrefixedType ::= Type ;
TAddr      . Type         ::= Type "&" ;
TQCon      . Type         ::= QConstant ;
TInt       . Type         ::= "int" ;
TBool      . Type         ::= "bool" ;
TChar      . Type         ::= "char" ;
TDouble    . Type         ::= "double";
TVoid      . Type         ::= "void";


-- Literals
-- TODO: Still need to handle precedence here once the other
--       expressions are done.
LInt    . Exp15 ::= Integer ;
LFloat  . Exp15 ::= Double ;
LChar   . Exp15 ::= Char ;
LString . Exp15 ::= String ;
LTrue   . Exp15 ::= "true" ;
LFalse  . Exp15 ::= "false" ;

-- Separators and terminators here
terminator Def "";
separator Stm "";
separator Arg ",";
separator nonempty VDVar ",";
separator VarDecl "";
separator Type ",";
separator Exp ",";

--identifiers
token Id (letter (letter|digit|'_')*) ;
-- comments
comment "//";
comment "/*" "*/";
comment "#";
